generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority { LOW MED HIGH }

enum OccurrenceStatus { SCHEDULED QUEUED SENT SKIPPED FAILED }

enum Channel { EMAIL SMS }

enum RuleType { ONEOFF RECURRING }

model User {
  id               String   @id @default(cuid())
  name             String?
  email            String   @unique
  emailVerified    DateTime?
  phoneE164        String?  @unique
  phoneVerified    Boolean  @default(false)
  timezone         String   @default("America/Edmonton")
  quietHoursStart  Int?     // minutes 0..1439 local
  quietHoursEnd    Int?     // minutes 0..1439 local
  locale           String   @default("en")
  tasks            Task[]
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime @default(now())
}

model Task {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  title       String
  notes       String?
  priority    Priority  @default(MED)
  dueAt       DateTime?
  isCompleted Boolean   @default(false)
  archivedAt  DateTime?
  rules       ReminderRule[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  labels      String[]  @default([])
}

model ReminderRule {
  id            String    @id @default(cuid())
  task          Task      @relation(fields: [taskId], references: [id])
  taskId        String
  type          RuleType
  rrule         String?
  offsetMinutes Int       @default(0)
  channels      Channel[]
  isPaused      Boolean   @default(false)
  startAt       DateTime?
  endAt         DateTime?
  occurrences   ReminderOccurrence[]
  createdAt     DateTime  @default(now())
}

model ReminderOccurrence {
  id        String            @id @default(cuid())
  rule      ReminderRule      @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  ruleId    String
  runAtUTC  DateTime
  status    OccurrenceStatus  @default(SCHEDULED)
  jobId     String?
  logs      DeliveryLog[]
  createdAt DateTime          @default(now())
  @@index([runAtUTC, status])
}

model DeliveryLog {
  id             String            @id @default(cuid())
  occurrence     ReminderOccurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
  occurrenceId   String
  channel        Channel
  provider       String
  requestPayload Json?
  responseMeta   Json?
  status         String
  error          String?
  createdAt      DateTime          @default(now())
  @@index([occurrenceId])
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
